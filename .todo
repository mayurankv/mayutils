Tooling: @critical
	Plots: @critical
		☐ `trace_info` @property to infer the colours (and trace type and other info) by traces for easy access to guessing colours (and refactor code to use this) @critical
		☐ `Subplot.from_plots` @classmethod using double nested array notation for rows and columns @critical
		☐ Error bouunds @critical
			☐ Fan Chart
				☐ `Fan` trace
			☐ Error Bounds
				```
				go.Scatter(
					x=[1, 2, 3, 4],
					y=[2, 1, 3, 4],
					error_y=dict(
						type='data',
						symmetric=False,
						array=[0.1, 0.2, 0.1, 0.1],
						arrayminus=[0.2, 0.4, 1, 0.2])
					)
				)
				```
		☐ Marginals and Rugs @critical
			☐ Rugs
				☐ Add histogram type
					- https://plotly.com/python/2d-histogram-contour/
			☐ Convert rugs to work independently for x and y axis dependent on trace type:
				☐ 2D: Scatter
					- https://plotly.com/python/2d-histogram-contour/
				☐ 1D: Histogram
		☐ 3D Histogram @critical @high
			☐ Heatmap/contour alternative
		☐ Categorical 3D Axes @critical @medium
			- https://plotly.com/python/categorical-axes/
		☐ Animations @low
			- https://plotly.com/python/animations/
			- https://community.plotly.com/t/single-subplot-animations/35235/2
			- https://plotly.com/~empet/15243/animating-traces-in-subplotsbr/#/
		☐ Subplot enlargement @hard @low
			☐ Plot from subplot axis and traces
				- https://community.plotly.com/t/how-to-remove-subplots-or-create-new-plot-from-a-subplot/72117/2
			☐ Zooming In
				- https://codepen.io/saratoga01/pen/QwWydeV
				- https://codepen.io/saratoga01/pen/WbNQygR
				- https://community.plotly.com/t/make-subplots-extract-highlight-one-subplot/74188/2
			☐ Full screen button from streamlit
				- https://github.com/plotly/plotly.js/issues/6287
				- https://gist.github.com/p1-rde/2120938f1c7f44c26755cfd83f8562e8

		Classification: @low
			☐ https://plotly.com/python/knn-classification/
			☐ https://plotly.com/python/roc-and-pr-curves/
			☐ https://plotly.com/python/pca-visualization/
			☐ https://towardsdatascience.com/using-shap-values-to-explain-how-your-machine-learning-model-works-732b3f40e137/

		Maps: @low
			☐ https://plotly.com/python/map-subplots-and-small-multiples/
			☐ https://plotly.com/python/tile-county-choropleth/
			☐ https://plotly.com/python/tile-scatter-maps/
			☐ https://plotly.com/python/map-configuration/
			☐ https://plotly.com/python/scatter-plots-on-maps/
			☐ https://plotly.com/python/density-heatmaps/
			☐ https://plotly.com/python/choropleth-maps/

	Logging: @critical
		☐ Make classmethod or staticmethod to change logging default level
		☐ Readd logging file handler to logger
		☐ Add logger.name to rich handler output
			- https://github.com/Textualize/rich/issues/850

	Pydantic: @low
		- https://docs.pydantic.dev/latest/api/base_model/#pydantic.BaseModel.model_construct
		- https://docs.pydantic.dev/latest/why/#ecosystem
		☐ Set up some things to use pydantic
		☐ Translate dataclasses to pydantic dataclasses where helpful
		☐ Explore `BaseModel`

	Decorators: @low
		☐ See if any other good decorators to implement

	Classes: @low
		☐ Add default class methods

	Tables: @low
		☐ Great Tables Theming @low
			- https://posit-dev.github.io/great-tables/get-started/table-theme-options.html

	DataFrames: @low
		☐ Polars functionality (wait till more familiar) @low

	Mathematics: @low
		☐ JIT https://numba.pydata.org/numba-doc/dev/user/jit.html

	Filesystem: @low
		Webdrivers:
			☐ Fix Chrome @hard
				☐ Fix all Chromium
			☐ Fix Firefox @hard
	Apps: @low
		☐ https://typer.tiangolo.com
		☐ streamlit

	Package: @medium
		☐ Set `[tool.poetry.optional-dependencies]`
			- Ensure safe to use without additional dependencies though or when using in python, not IPython

Productivity: @medium
	Assistive AI:
		☐ Cursor
			☐ Set up @critical
		☐ Cline
			https://cline.bot/
			☐ Set up @high
			Gather Rules:
				☐ https://docs.cursor.com/context/rules
				☐ https://www.cursorrules.org
				☐ https://github.com/PatrickJS/awesome-cursorrules
				☐ Search `cursorrules`
		☐ Copilot
			Rules:
				☐ https://docs.github.com/en/copilot/customizing-copilot/adding-personal-custom-instructions-for-github-copilot
				☐ https://docs.github.com/en/copilot/customizing-copilot/adding-repository-custom-instructions-for-github-copilot
			☐ https://docs.github.com/en/copilot/customizing-copilot/customizing-the-development-environment-for-copilot-coding-agent
			☐ Understand Copilot Workspace
				☐ https://githubnext.com/projects/copilot-workspace/
				☐ https://github.com/githubnext/copilot-workspace-user-manual
			Agents:
				☐ https://github.com/marketplace/gitbook-for-github-copilot
				☐ https://github.com/marketplace/docker-for-github-copilot
			Models:
				☐ https://github.com/marketplace/models
				☐ https://github.com/marketplace?type=models
			Prompts:
				☐ https://docs.github.com/en/copilot/customizing-copilot/adding-repository-custom-instructions-for-github-copilot#enabling-or-disabling-repository-custom-instructions

		☐ Obsidian

		Read:
			- https://www.reddit.com/r/ChatGPTCoding/comments/1ilg9zl/cursor_vs_aider_vs_vscode_copilot_which_ai_coding/

Understand: @low
	- https://github.com/scottgasch/pyutils
	- https://aws.amazon.com/what-is/data-lake/

Tools: @low
	Drawing:
		- https://www.tldraw.com/
		- https://excalidraw.com
	Writing:
		- https://stackedit.io/
